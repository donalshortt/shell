==22832== Memcheck, a memory error detector
==22832== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22832== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==22832== Command: ./mysh -c pwd\ |\ (ls\ -alh\ /)\ |\ (pwd|pwd)\ |\ {pwd;pwd}\ |\ {{pwd|pwd};pwd}\ |\ 2\>&1\ \>/dev/null\ ls\ .\ fdsfsa\ |\ \>a\ pwd\ |\ \>\>b\ pwd\ |\ (pwd\ &)\ |\ cd\ /\ |\ exit\ 31
==22832== Parent PID: 22732
==22832== 
==22834== Syscall param execve(argv[i]) points to uninitialised byte(s)
==22834==    at 0x5169E37: execve (syscall-template.S:78)
==22834==    by 0x516A287: execl (execl.c:55)
==22834==    by 0x5105912: _IO_proc_open@@GLIBC_2.2.5 (iopopen.c:148)
==22834==    by 0x5105987: popen@@GLIBC_2.2.5 (iopopen.c:206)
==22834==    by 0x109FAB: handle_pipe (shell.c:121)
==22834==    by 0x109D7A: run_command (shell.c:46)
==22834==    by 0x10B418: yy_reduce (parser.y:26)
==22834==    by 0x10BE8A: Parse (parser.c:1078)
==22834==    by 0x109AD4: handle_command (front.c:51)
==22834==    by 0x109B76: main (front.c:87)
==22834==  Address 0x56a2f80 is 0 bytes inside a block of size 100,000 alloc'd
==22834==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22834==    by 0x109F19: argvec_concat (shell.c:102)
==22834==    by 0x109F79: handle_pipe (shell.c:119)
==22834==    by 0x109D7A: run_command (shell.c:46)
==22834==    by 0x10B418: yy_reduce (parser.y:26)
==22834==    by 0x10BE8A: Parse (parser.c:1078)
==22834==    by 0x109AD4: handle_command (front.c:51)
==22834==    by 0x109B76: main (front.c:87)
==22834== 
==22835== Syscall param execve(argv[i]) points to uninitialised byte(s)
==22835==    at 0x5169E37: execve (syscall-template.S:78)
==22835==    by 0x516A287: execl (execl.c:55)
==22835==    by 0x5105912: _IO_proc_open@@GLIBC_2.2.5 (iopopen.c:148)
==22835==    by 0x5105987: popen@@GLIBC_2.2.5 (iopopen.c:206)
==22835==    by 0x109FAB: handle_pipe (shell.c:121)
==22835==    by 0x109D7A: run_command (shell.c:46)
==22835==    by 0x10B418: yy_reduce (parser.y:26)
==22835==    by 0x10BE8A: Parse (parser.c:1078)
==22835==    by 0x109AD4: handle_command (front.c:51)
==22835==    by 0x109B76: main (front.c:87)
==22835==  Address 0x577eea0 is 0 bytes inside a block of size 100,000 alloc'd
==22835==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22835==    by 0x109F19: argvec_concat (shell.c:102)
==22835==    by 0x109F79: handle_pipe (shell.c:119)
==22835==    by 0x109D7A: run_command (shell.c:46)
==22835==    by 0x10B418: yy_reduce (parser.y:26)
==22835==    by 0x10BE8A: Parse (parser.c:1078)
==22835==    by 0x109AD4: handle_command (front.c:51)
==22835==    by 0x109B76: main (front.c:87)
==22835== 
==22837== Syscall param execve(argv[i]) points to uninitialised byte(s)
==22837==    at 0x5169E37: execve (syscall-template.S:78)
==22837==    by 0x516A287: execl (execl.c:55)
==22837==    by 0x5105912: _IO_proc_open@@GLIBC_2.2.5 (iopopen.c:148)
==22837==    by 0x5105987: popen@@GLIBC_2.2.5 (iopopen.c:206)
==22837==    by 0x109FAB: handle_pipe (shell.c:121)
==22837==    by 0x109D7A: run_command (shell.c:46)
==22837==    by 0x10B418: yy_reduce (parser.y:26)
==22837==    by 0x10BE8A: Parse (parser.c:1078)
==22837==    by 0x109AD4: handle_command (front.c:51)
==22837==    by 0x109B76: main (front.c:87)
==22837==  Address 0x57976c0 is 0 bytes inside a block of size 100,000 alloc'd
==22837==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22837==    by 0x109F19: argvec_concat (shell.c:102)
==22837==    by 0x109F79: handle_pipe (shell.c:119)
==22837==    by 0x109D7A: run_command (shell.c:46)
==22837==    by 0x10B418: yy_reduce (parser.y:26)
==22837==    by 0x10BE8A: Parse (parser.c:1078)
==22837==    by 0x109AD4: handle_command (front.c:51)
==22837==    by 0x109B76: main (front.c:87)
==22837== 
==22832== 
==22832== HEAP SUMMARY:
==22832==     in use at exit: 800,008 bytes in 9 blocks
==22832==   total heap usage: 121 allocs, 112 frees, 1,105,420 bytes allocated
==22832== 
==22832== LEAK SUMMARY:
==22832==    definitely lost: 800,000 bytes in 8 blocks
==22832==    indirectly lost: 0 bytes in 0 blocks
==22832==      possibly lost: 0 bytes in 0 blocks
==22832==    still reachable: 8 bytes in 1 blocks
==22832==         suppressed: 0 bytes in 0 blocks
==22832== Rerun with --leak-check=full to see details of leaked memory
==22832== 
==22832== For counts of detected and suppressed errors, rerun with: -v
==22832== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
